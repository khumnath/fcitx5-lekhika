name: Release

on:
  push:
    tags: ['v*']

permissions:
  contents: write

jobs:
  source:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.src.outputs.version }}
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'
      - name: Update metainfo
        run: ./update-metainfo.sh
      - name: Create source tarball and set version
        id: src
        run: |
          # Derive version from the Git tag (e.g., v2.1.1 becomes 2.1.1)
          VER=${GITHUB_REF_NAME#v}
          echo "version=$VER" >> "$GITHUB_OUTPUT"

          TAR="fcitx5-lekhika-${VER}.tar.gz"
          # Create a source tarball that includes the submodule content
          git archive --format=tar --prefix="fcitx5-lekhika-${VER}/" HEAD | (cd liblekhika && git archive --format=tar --prefix="fcitx5-lekhika-${VER}/liblekhika/" HEAD) | gzip > "$TAR"
      - uses: actions/upload-artifact@v4
        with:
          name: source-tarball
          path: '*.tar.gz'

  deb:
    needs: source
    runs-on: ${{ matrix.distro }}
    strategy:
      matrix:
        distro: [ubuntu-22.04, ubuntu-latest]
    steps:
      - name: install build-deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            unzip \
            build-essential dpkg-dev debhelper devscripts \
            cmake ninja-build extra-cmake-modules \
            libfcitx5core-dev libfcitx5utils-dev libfcitx5config-dev \
            libsqlite3-dev qt6-base-dev libicu-dev qt6-base-dev-tools
      - uses: actions/download-artifact@v4
        with:
          name: source-tarball
      - name: Build debian package
        run: |
          unzip source-tarball.zip
          mkdir pkg-src && tar -xf *.tar.gz -C pkg-src --strip-components=1
          cd pkg-src
          
          # Manually build and stage the project
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr
          cmake --build build
          DESTDIR=../dist cmake --install build
          cd ..

          # Manually create the debian package from the staged files
          VER=${{ needs.source.outputs.version }}
          mkdir -p package/DEBIAN
          cp -r dist/* package/
          {
            echo "Package: fcitx5-lekhika"
            echo "Version: ${VER}"
            echo "Architecture: amd64"
            echo "Maintainer: KHUMNATH CG <nath.khum@gmail.com>"
            echo "Description: Lekhika IME for Fcitx5 with bundled library and trainer"
            echo "Depends: libfcitx5-qt1, libsqlite3-0, libicu70 | libicu71, libqt6widgets6"
          } > package/DEBIAN/control
          dpkg-deb --build package "fcitx5-lekhika_${VER}_amd64.deb"

      - name: Add t64 suffix for latest ubuntu build
        if: matrix.distro == 'ubuntu-latest'
        run: |
          shopt -s nullglob
          for f in *.deb; do mv -- "$f" "${f%.deb}_t64.deb"; done
      - uses: actions/upload-artifact@v4
        with:
          name: debian-packages-${{ matrix.distro }}
          path: "*.deb"

  rpm-fedora:
    needs: source
    runs-on: ubuntu-latest
    container: fedora:39
    steps:
      - run: |
          dnf clean all
          dnf install -y unzip rpm-build cmake ninja-build gcc-c++ \
            fcitx5-devel qt6-qtbase-devel sqlite-devel libicu-devel
      - uses: actions/download-artifact@v4
        with:
          name: source-tarball
      - name: Build RPM package
        run: |
          unzip source-tarball.zip
          VER=${{ needs.source.outputs.version }}
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          cp *.tar.gz ~/rpmbuild/SOURCES/
          {
            echo "Name:           fcitx5-lekhika"
            echo "Version:        ${VER}"
            echo "Release:        1%{?dist}"
            echo "Summary:        Lekhika input method for Fcitx5 (includes trainer)"
            echo "License:        GPL-3.0+"
            echo "Source0:        fcitx5-lekhika-%{version}.tar.gz"
            echo "BuildRequires:  cmake, ninja-build, gcc-c++, fcitx5-devel, qt6-qtbase-devel, sqlite-devel, libicu-devel"
            echo "Requires:       fcitx5-qt, sqlite, libicu, qt6-qtwidgets"
            echo "%description"
            echo "Lekhika input-method addon for Fcitx5, with bundled liblekhika and trainer GUI."
            echo "%prep"
            echo "%autosetup -n fcitx5-lekhika-%{version}"
            echo "%build"
            echo "%cmake -DCMAKE_BUILD_TYPE=Release"
            echo "%cmake_build"
            echo "%install"
            echo "%cmake_install"
            echo "%files"
            echo "%{_libdir}/liblekhika.so.*"
            echo "/usr/share/lekhika-core/*"
            echo "%{_libdir}/fcitx5/*.so"
            echo "%{_datadir}/fcitx5/*"
            echo "%{_bindir}/lekhika-trainer"
            echo "%{_datadir}/applications/*.desktop"
            echo "%{_datadir}/icons/hicolor/*/apps/lekhika.*"
            echo "%{_datadir}/metainfo/*.xml"
          } > ~/rpmbuild/SPECS/fcitx5-lekhika.spec
          rpmbuild -bb ~/rpmbuild/SPECS/fcitx5-lekhika.spec
      - uses: actions/upload-artifact@v4
        with:
          name: fedora-rpms
          path: ~/rpmbuild/RPMS/*/*.rpm

  arch:
    needs: source
    runs-on: ubuntu-latest
    container: archlinux:latest
    steps:
      - run: pacman -Syu --noconfirm unzip base-devel cmake ninja fcitx5-qt sqlite qt6-base icu
      - uses: actions/download-artifact@v4
        with:
          name: source-tarball
      - name: Build Arch package
        run: |
          unzip source-tarball.zip
          useradd -m builder && mkdir arch_build && mv *.tar.gz arch_build/ && chown -R builder:builder arch_build
          sudo -u builder GITHUB_REPOSITORY=${{ github.repository }} PKGVER=${{ needs.source.outputs.version }} \
          bash -c 'cd arch_build && {
            echo "pkgname=fcitx5-lekhika"
            echo "pkgver=${PKGVER}"
            echo "pkgrel=1"
            echo "pkgdesc=\"Lekhika input method for Fcitx5 (includes trainer)\""
            echo "arch=('x86_64')"
            echo "url=\"https://github.com/${GITHUB_REPOSITORY}\""
            echo "license=('GPL3')"
            echo "depends=(\"fcitx5-qt\" \"sqlite\" \"icu\" \"qt6-base\")"
            echo "makedepends=('cmake' 'ninja')"
            echo "source=(\"fcitx5-lekhika-\${pkgver}.tar.gz\")"
            echo "sha256sums=(\"SKIP\")"
            echo "build() {"
            echo "  cd \"fcitx5-lekhika-\${pkgver}\""
            echo "  cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr"
            echo "  cmake --build build"
            echo "}"
            echo "package() {"
            echo "  cd \"fcitx5-lekhika-\${pkgver}/build\""
            echo "  DESTDIR=\"\$pkgdir\" cmake --install ."
            echo "  rm -rf \"\$pkgdir/usr/bin/lekhika-cli\" \"\$pkgdir/usr/include\" \"\$pkgdir/usr/lib/cmake\""
            echo "}"
          } > PKGBUILD && makepkg -f --noconfirm'
          mv arch_build/*.pkg.tar.zst .
      - uses: actions/upload-artifact@v4
        with:
          name: arch-packages
          path: "*.pkg.tar.zst"

  create-generic-linux-tarball:
    needs: source
    runs-on: ubuntu-22.04
    steps:
      - name: install build-deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            unzip \
            build-essential cmake ninja-build extra-cmake-modules \
            libfcitx5core-dev libfcitx5utils-dev libfcitx5config-dev \
            libsqlite3-dev qt6-base-dev libicu-dev qt6-base-dev-tools
      - uses: actions/download-artifact@v4
        with:
          name: source-tarball
      - name: Build from source
        run: |
          unzip source-tarball.zip
          mkdir pkg && tar -xf *.tar.gz -C pkg --strip-components=1
          cd pkg
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr
          cmake --build build
          DESTDIR=dist cmake --install build
      - name: Create tarball
        run: |
          VER=${{ needs.source.outputs.version }}
          cd pkg/dist
          tar -czf "../../fcitx5-lekhika-${VER}-linux-x86_64.tar.gz" .
      - uses: actions/upload-artifact@v4
        with:
          name: generic-linux-tarball
          path: fcitx5-lekhika-*-linux-x86_64.tar.gz

  release:
    needs: [source, deb, rpm-fedora, arch, create-generic-linux-tarball]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: final-release
      - name: Organize files and generate checksums
        run: |
          mkdir organized-release
          # Use find to move all artifacts into the new directory
          find final-release -mindepth 2 -type f -exec mv {} organized-release/ \;
          cd organized-release
          sha256sum * > SHA256SUMS.txt
      - name: Generate changelog
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: |
          PREV=$(git describe --tags --abbrev=0 "$(git rev-list --tags --max-count=2)" | tail -n 1)
          if [ -n "$PREV" ]; then
            echo "### Changes since $PREV" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" "$PREV..HEAD" >> CHANGELOG.md
          else
            git log --pretty=format:"- %s (%h)" > CHANGELOG.md
          fi
      - name: create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: organized-release/*
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

